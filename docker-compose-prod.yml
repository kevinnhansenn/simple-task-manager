version: "3"
services:
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    ports:
      - 8080:80
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - network_main
    container_name: client
  server_group:
    build:
      context: ./server/group
      dockerfile: Dockerfile.prod
    ports:
      - 5000:5000
    restart: unless-stopped
    depends_on:
      - db_group
    environment:
      - NODE_ENV=production
    volumes:
      - ./server/group:/app
      - /app/node_modules
    networks:
      - network_group
      - network_main
    container_name: server_group
  server_task:
    build:
      context: ./server/task
      dockerfile: Dockerfile.prod
    ports:
      - 5001:5001
    restart: unless-stopped
    depends_on:
      - db_task
    environment:
      - NODE_ENV=production
    volumes:
      - ./server/task:/app
      - /app/node_modules
    networks:
      - network_task
      - network_main
    container_name: server_task
  server_email:
    build:
      context: ./server/email
      dockerfile: Dockerfile.prod
    ports:
      - 5002:5002
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - FORCE_COLOR=1
    volumes:
      - ./server/email:/app
      - /app/node_modules
    networks:
      - network_main
    container_name: server_email
  db_group:
    image: mongo:3-xenial
    ports:
      - 27017:27017
    logging:
      driver: none
    volumes:
      - db_group:/data/db
      - db_group_config:/data/configdb
    networks:
      - network_group
    container_name: db_group
  db_task:
    image: mongo:3-xenial
    ports:
      - 27018:27017
    logging:
      driver: none
    volumes:
      - db_task:/data/db
      - db_task_config:/data/configdb
    networks:
      - network_task
    container_name: db_task
networks:
  network_main:
  network_group:
  network_task:
volumes:
  db_group:
  db_group_config:
  db_task:
  db_task_config:
